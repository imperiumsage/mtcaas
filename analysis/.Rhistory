require(rjson)
require(tm)
json_file <- "http://trackathon.com/all_menu_items_proc.txt"
json_data <- fromJSON(paste(readLines(json_file), collapse=""))
mydata.corpus <- Corpus(VectorSource(json_data))
mydata.corpus <- tm_map(mydata.corpus,tolower)
mydata.corpus <- tm_map(mydata.corpus, removePunctuation)
mystopwords <- c(stopwords("english"),"amp")
mydata.corpus <- tm_map(mydata.corpus, removeWords, mystopwords)
mydata.dtm <- TermDocumentMatrix(mydata.corpus)
inspect(removeSparseTerms(mydata.dtm, 0.4))
mydata.dtm2 <- removeSparseTerms(mydata.dtm, sparse=0.95)
inspect(mydata.dtm2)
mydata.df <- as.data.frame(inspect(mydata.dtm2))
nrow(mydata.df)
ncol(mydata.df)
mydata.df.scale <- scale(mydata.df)
d <- dist(mydata.df.scale, method = "euclidean")
fit <- hclust(d, method="ward")
plot(fit)
mydata.dtm2 <- removeSparseTerms(mydata.dtm, sparse=0.9)
dtm.clust<-kmeans(x=mydata.dtm2,centers = 20, iter.max=40,nstart=10,algorithm="Hartigan-Wong")
mydata.dtm2 <- removeSparseTerms(mydata.dtm, sparse=0.8)
dtm.clust<-kmeans(x=mydata.dtm2,centers = 20, iter.max=40,nstart=10,algorithm="Hartigan-Wong")
mydata.dtm2 <- removeSparseTerms(mydata.dtm, sparse=0.7)
dtm.clust<-kmeans(x=mydata.dtm2,centers = 20, iter.max=40,nstart=10,algorithm="Hartigan-Wong")
mydata.dtm2 <- removeSparseTerms(mydata.dtm, sparse=0.5)
dtm.clust<-kmeans(x=mydata.dtm2,centers = 20, iter.max=40,nstart=10,algorithm="Hartigan-Wong")
mydata.dtm2 <- removeSparseTerms(mydata.dtm, sparse=0.4)
dtm.clust<-kmeans(x=mydata.dtm2,centers = 20, iter.max=40,nstart=10,algorithm="Hartigan-Wong")
dtm.clust<-kmeans(x=mydata.dtm2,iter.max=40,nstart=10,algorithm="Hartigan-Wong")
dtm.clust<-kmeans(x=mydata.dtm2,iter.max=40,nstart=10,algorithm="Hartigan-Wong",centers=10)
size(mydata.dm2)
size(mydata.dtm2)
count(mydata.dtm2)
length(mydata.dtm2)
mydata.dtm2 <- removeSparseTerms(mydata.dtm, sparse=0.95)
str(mydata.dtm2)
mydata.dtm2 <- removeSparseTerms(mydata.dtm, sparse=0.9)
str(mydata.dtm2)
mydata.dtm2 <- removeSparseTerms(mydata.dtm, sparse=0.95)
mydata.dtm2 <- removeSparseTerms(mydata.dtm, sparse=0.99)
str(mydata.dtm2)
dtm.clust<-kmeans(x=mydata.dtm2,iter.max=40,nstart=10,algorithm="Hartigan-Wong",centers=20)
dtm.clust$size
tdmHighFreq<-findFreqTerms(mydata.dtm,100)
Data(mydata.tdm)[1:10,tdmHighFreq]
Data(mydata.dtm)[1:10,tdmHighFreq]
Data(mydata.dtm)[1:10,]
mydata.dtm[1:10,tdmHighFreq]
str(mydata.dtm)
tdmHighFreq
params <- list(minDocFreq = 2,removeNumbers = TRUE,stemming = TRUE,stopwords = TRUE)
dim(mydata.dtm)
library("slam")
summary(col_sums(mydata.dtm))
JSS_dtm<-mydata.dtm
term_tfidf <-tapply(JSS_dtm$v/row_sums(JSS_dtm)[JSS_dtm$i], JSS_dtm$j, mean) *log2(nDocs(JSS_dtm)/col_sums(JSS_dtm > 0))
term_tfidf <-tapply(JSS_dtm$v/row_sums(JSS_dtm)[JSS_dtm$i], JSS_dtm$j, mean) * log2(nDocs(JSS_dtm)/col_sums(JSS_dtm > 0))
nDocs(JSS_dtm)
col_sums(JSS_dtm > 0)
str(col_sums(JSS_dtm > 0))
str(JSS_dtm$v)
term_tfidf <-tapply(JSS_dtm$v/(row_sums(JSS_dtm)[JSS_dtm$i], JSS_dtm$j, mean) * log2(nDocs(JSS_dtm)/col_sums(JSS_dtm > 0)))
str(row_sums(JSS_dtm)[JSS_dtm$i],)
str(row_sums(JSS_dtm)[JSS_dtm$i])
tapply(JSS_dtm$v/row_sums(JSS_dtm)[JSS_dtm$i], JSS_dtm$j, mean)
log2(nDocs(JSS_dtm)/col_sums(JSS_dtm > 0))
str(log2(nDocs(JSS_dtm)/col_sums(JSS_dtm > 0)))
str(tapply(JSS_dtm$v/row_sums(JSS_dtm)[JSS_dtm$i], JSS_dtm$j, mean))
str(JSS_dtm$v/row_sums(JSS_dtm)[JSS_dtm$i])
str(JSS_dtm$j)
plot(mydata.tdm, terms = findFreqTerms(mydata.tdm, lowfreq = 200)[1:25], corThreshold = 0.5)
plot(mydata.dtm, terms = findFreqTerms(mydata.dtm, lowfreq = 200)[1:25], corThreshold = 0.5)
library(Rgraphviz)
load(Rgraphviz)
load("Rgraphviz")
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
plot(mydata.dtm, terms = findFreqTerms(mydata.dtm, lowfreq = 200)[1:25], corThreshold = 0.5)
plot(mydata.dtm, terms = findFreqTerms(mydata.dtm, lowfreq = 200)[1:25], corThreshold = 0.5)
source("http://bioconductor.org/biocLite.R")
biocLite("Rgraphviz")
plot(mydata.dtm, terms = findFreqTerms(mydata.dtm, lowfreq = 200)[1:25], corThreshold = 0.5)
fix(mydata.dtm)
save.image("~/menus.RData")
load("~/menus.RData")
library(Snowball)
library(RWeka)
library(rJava)
library(Snowball)
library(RWeka)
library(rJava)
vec<-c("running runner runs","happyness happies")
stemDocument(vec)
install.packages("Snowball")
install.packages("RWeka")
install.packages("RWekajars")
install.packages("rJava")
stemDocument(vec)
library(Snowball)
library(RWeka)
library(rJava)
stemDocument(vec)
?stemDocument
?stem
?stemming
library(rstem)
install.packages("Stem")
library(rstem)
library(stem)
library(Stem)
?stemDocument
library(tm)
a <- c(“mining”, “miners”, “mining”)
a <- c('mining','miners','mining')
stemDocument(a)
stemDocument(a,language="english")
stemDocument(a,language="english")
stemDocument(a,language=english)
stemDocument(a,language?)
?stemDocument
SnowballStemmer(a)
Sys.setenv(NOAWT = TRUE)
library(rjava)
library(Snowball)
library(Rweka)
library(RWeka)
library(Rjava)
library(RJava)
library(rJava)
library(tm)
SnowballStemmer(a)
R.version()
R.Version()
example(SnowballStemmer)
Sys.setenv("NOAWT", "true")
Sys.setenv("NOAWT", true)
Sys.setenv(NOAWT, true)
Sys.setenv(NOAWT=true)
Sys.setenv(NOAWT=TRUE)
example(SnowballStemmer)
library(Snowball)
example(SnowballStemmer)
Sys.setenv(NOAWT=true)
Sys.setenv(NOAWT=TRUE)
library(Snowball)
Sys.setenv(NOAWT=TRUE)
library(Snowball)
example(SnowballStemmer)
a <- c('mining','miners','mining')
SnowballStemmer(a)
load(tm)
library(tm)
mydata.corpus
mydata.corpus <- tm_map(mydata.corpus, stemDocument)
mydata.corpus
mydata.dtm <- TermDocumentMatrix(mydata.corpus)
mydata.dtm
findFreqTerms(dtm, 5)
findFreqTerms(mydata.dtm, 5)
findFreqTerms(mydata.dtm, 100)
findFreqTerms(mydata.dtm, 200)
setwd("~/Documents/Code/mygithub_code/mtcaas/analysis")
tsData<-read.csv("usd_inr_tsdata.csv")
str(tsData)
tsData<-read.csv("usd_inr_tsdata.csv",sep="\t")
str(tsData)
tsData<-read.csv("usd_inr_tsdata.csv",sep="  ")
tsData<-read.csv("usd_inr_tsdata.csv",sep=" ")
str(tsData)
tsData<-read.csv("usd_inr_tsdata.csv",sep=" ")
str(tsData)
tsData$VALUE
myts <- ts(tsData$VALUE, start=c(1973, 1), end=c(2013, 3), frequency=12)
plot(myts)
fit <- stl(myts, s.window="period")
plot(fit)
monthplot(myts)
library(forecast)
seasonplot(myts)
install.packages("forecast")
monthplot(myts)
library(forecast)
seasonplot(myts)
fit <- arima(myts, order=c(p, d, q))
fit <- ets(myts)
plot(forecast(fit, 5))
forecast(fit, 5)
